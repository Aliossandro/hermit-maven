<?xml version="1.0"?>
<!-- Copyright 2008 by Oxford University; see license.txt for details -->

<project name="HermiT" default="combined" basedir=".">

    <!-- determine the build date -->
    <tstamp>
        <format property="builddate" pattern="yyyy-MM-dd"/>
    </tstamp>
    <property name="revision" value="0.9.0a"/>
    <property name="version" value="${revision}"/>

    <!-- structure of output files -->
    <property name="projectroot" value="."/>
    <property name="builddir" value="${projectroot}/build"/>
    <property name="flattendir" value="${builddir}/flatten"/>
    <property name="classdir" value="${builddir}/class"/>
    <property name="plugindir" value="${builddir}/plugin"/>
    <property name="testclassdir" value="${builddir}/testclass"/>

    <!-- structure of the release -->
    <property name="releasedir" value="${builddir}/release"/>
    <property name="HermiTjar" value="${releasedir}/${ant.project.name}.jar"/>
    <!-- <property name="pluginjar" value="${releasedir}/${ant.project.name}-Protégé.jar"/> -->
    <property name="HermiTsrcjar" value="${releasedir}/${ant.project.name}-src.zip"/>
    <property name="javadocdir" value="${releasedir}/javadoc/javadoc"/>
    <property name="apijavadocdir" value="${javadocdir}/api"/>
    <property name="fulljavadocdir" value="${javadocdir}/full"/>
    
    <property name="src" value="${projectroot}/src/org/semanticweb/HermiT"/>

    <!-- structure of 3rdparty libraries -->
    <property name="3rdpartydir" value="${projectroot}/../ThirdPartyOwlTools"/>
    <property name="owlapi" value="${3rdpartydir}/owlapi/2.2.1/owlapi-bin.jar"/>
    <property name="kaon2" value="${3rdpartydir}/kaon2/2008-06-29/kaon2.jar"/>
    <property name="junit" value="${3rdpartydir}/junit/4.4/junit-4.4.jar"/>
    <property name="protegeapp" value="${3rdpartydir}/protege/4.0/org.protege.editor.core.application.jar"/>
    <property name="protegeowl" value="${3rdpartydir}/protege/4.0/org.protege.editor.owl.jar"/>
    <property name="automaton" value="${projectroot}/lib/automaton.jar"/>
    
    <!-- SOURCE PATHS -->
    <path id="sourcepath">
        <pathelement path="${projectroot}/src"/>
    </path>
    <path id="pluginsourcepath">
        <pathelement path="${projectroot}/plugin"/>
    </path>
    <path id="testsourcepath">
        <pathelement path="${projectroot}/test"/>
    </path>

    <!-- CLASS PATHS -->
    <path id="classpath">
        <pathelement location="${owlapi}"/>
        <pathelement location="${kaon2}"/>
        <pathelement location="${automaton}"/>
    </path>
    <path id="runclasspath">
        <pathelement location="${owlapi}"/>
        <pathelement location="${kaon2}"/>
        <pathelement location="${automaton}"/>
        <pathelement path="${classdir}"/>
    </path>
    <path id="pluginclasspath">
        <pathelement location="${owlapi}"/>
        <pathelement location="${automaton}"/>
        <pathelement path="${HermiTjar}"/>
        <pathelement location="${protegeapp}"/>
        <pathelement location="${protegeowl}"/>
    </path>
    <path id="testclasspath">
        <pathelement path="${classdir}"/>
        <pathelement location="${junit}"/>
    </path>


    <!-- RELEASE TARGETS  -->

    <target name="clean">
        <delete dir="${builddir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${classdir}"/>
        <mkdir dir="${builddir}/clisrc"/>
        <copy todir="${builddir}/clisrc">
            <fileset dir="${projectroot}/cli"/>
            <filterset>
                <filter token="VERSION" value="${version}"/>
            </filterset>
        </copy>
        <javac destdir="${classdir}" deprecation="yes">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Xlint:-serial"/>
            <src>
                <pathelement path="${projectroot}/src"/>
                <pathelement path="${builddir}/clisrc"/>
            </src>
            <classpath refid="classpath"/>
        </javac>
        <copy todir="${classdir}" >
            <fileset dir="${projectroot}/src" excludes="**/*.java,**/*.html"/>
            <fileset dir="${projectroot}/cli" excludes="**/*.java,**/*.html"/>
        </copy>
    </target>
    
    <target name="flatten-owlapi">
        <mkdir dir="${flattendir}"/>
        <unjar src="${owlapi}" dest="${flattendir}"/>
    </target>
    
    <target name="flatten-automaton">
        <mkdir dir="${flattendir}"/>
        <unjar src="${automaton}" dest="${flattendir}"/>
    </target>

    <target name="without-plugin" depends="compile,flatten-owlapi,flatten-automaton">
        <mkdir dir="${releasedir}"/>
        <jar jarfile="${HermiTjar}">
            <manifest>
                <attribute name="Implementation-Title" value="HermiT"/>
                <attribute name="Implementation-Vendor" value="Oxford University"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Main-Class" value="org.semanticweb.HermiT.CommandLine"/>
            </manifest>
            <fileset dir="${classdir}"/>
            <fileset dir="${flattendir}"/>
        </jar>
    </target>
    
    <target name="combined" depends="compile,flatten-owlapi,flatten-automaton,javadoc">
        <mkdir dir="${releasedir}"/>
        <javac destdir="${classdir}" deprecation="yes">
            <compilerarg value="-Xlint:all"/>
            <src refid="pluginsourcepath"/>
            <classpath refid="pluginclasspath"/>
        </javac>
        <copy todir="${classdir}" file="plugin/plugin.xml">
            <filterset>
                <filter token="VERSION" value="${version}"/>
            </filterset>
        </copy>
        <mkdir dir="${releasedir}/src/src"/>
        <copy todir="${releasedir}/src/src">
            <fileset dir="${projectroot}">
                <exclude name="bin/**"/>
                <exclude name="build/**"/>
            </fileset>
        </copy>
        <copy file="readme.txt" tofile="${releasedir}/readme.txt">
            <filterset>
                <filter token="VERSION" value="${version}"/>
            </filterset>
        </copy>
        <jar jarfile="${HermiTjar}">
            <manifest>
                <attribute name="Implementation-Title" value="HermiT"/>
                <attribute name="Implementation-Vendor" value="Oxford University"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Main-Class" value="org.semanticweb.HermiT.CommandLine"/>
                <attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Name" value="HermiT Reasoner"/>
                <attribute name="Bundle-SymbolicName" value="org.semanticweb.HermiT;singleton:=true"/>
                <attribute name="Bundle-Category" value="protege"/>
                <attribute name="Bundle-Description" value="A plugin for the Protege OWL Editor which allows reasoning using the HermiT reasoner"/>
                <attribute name="Bundle-DocURL" value="http://hermit-reasoner.com"/>
                <attribute name="Bundle-Vendor" value="Boris Motik, Rob Shearer, and Ian Horrocks"/>
                <attribute name="Bundle-Version" value="0.${revision}"/>
                <attribute name="Bundle-Activator" value="org.protege.editor.core.plugin.DefaultPluginActivator"/>
                <attribute name="Bundle-ClassPath" value="."/>
                <attribute name="Require-Bundle" value="org.protege.common,org.protege.editor.core.application,org.protege.editor.owl,org.semanticweb.owl.owlapi"/>
            </manifest>
            <fileset dir="${classdir}"/>
            <fileset dir="${flattendir}"/>
            <fileset dir="${releasedir}/src"/>
            <fileset dir="${javadocdir}"/>
            <fileset file="${releasedir}/readme.txt"/>
            <fileset file="gpl.txt"/>
        </jar>
    </target>
    
    <!-- <target name="jarsrc">
        <mkdir dir="${releasedir}"/>
        <jar jarfile="${HermiTsrcjar}">
            <fileset dir="${projectroot}">
                <exclude name="bin/**"/>
                <exclude name="build/**"/>
            </fileset>
        </jar>
    </target> -->
    
    <target name="javadoc">
        <mkdir dir="${javadocdir}"/>
        <mkdir dir="${apijavadocdir}"/>
        <javadoc destdir="${apijavadocdir}" access="public" author="false" version="true" use="true">
            <package name="org.semanticweb.HermiT.*"/>
            <classpath refid="runclasspath"/>
            <source file="${src}/Reasoner.java"/>
            <source file="${src}/Namespaces.java"/>
            <source file="${src}/hierarchy/HierarchyPosition.java"/>
        </javadoc>
        <mkdir dir="${fulljavadocdir}"/>
        <javadoc sourcepathref="sourcepath" destdir="${fulljavadocdir}" access="private" author="false" version="true" use="true">
            <package name="org.semanticweb.HermiT.*"/>
            <classpath refid="classpath"/>
        </javadoc>
    </target>
    
    <!-- <target name="release" depends="clean,combined,jarsrc,javadoc">
        <copy file="readme.txt" tofile="${releasedir}/readme.txt">
            <filterset>
                <filter token="VERSION" value="${version}"/>
            </filterset>
        </copy>
        <copy file="gpl.txt" tofile="${releasedir}/license.txt"/>
        <zip zipfile="${builddir}/${ant.project.name}-${version}.zip" basedir="${releasedir}"/>
    </target> -->

    <!-- TEST TARGETS -->

    <target name="compiletest" depends="compile">
        <mkdir dir="${testclassdir}"/>
        <javac destdir="${testclassdir}" deprecation="yes">
            <compilerarg value="-Xlint:unchecked"/>
            <src refid="testsourcepath"/>
            <classpath refid="classpath"/>
            <classpath refid="testclasspath"/>
        </javac>
        <copy todir="${testclassdir}" >
            <fileset dir="${projectroot}/test" excludes="**/*.java,**/*.html"/>
        </copy>
    </target>

    <target name="test" depends="compiletest">
        <java classname="org.semanticweb.HermiT.AllTests" fork="true">
            <jvmarg value="-enableassertions"/>
            <classpath>
                <pathelement location="${testclassdir}"/>
            </classpath>
            <classpath refid="classpath"/>
            <classpath refid="testclasspath"/>
        </java>
    </target>

    <!-- RUN TARGETS -->

    <target name="run" depends="compile,compiletest">
        <java classname="org.semanticweb.HermiT.run.RunHermiT" fork="true">
            <classpath>
                <pathelement location="${testclassdir}"/>
            </classpath>
            <classpath refid="classpath"/>
            <classpath refid="testclasspath"/>
        </java>
    </target>

</project>
